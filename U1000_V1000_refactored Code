import os
import re
import numpy as np
import pandas as pd
import requests
import pygrib
from datetime import datetime, timedelta

# === CONFIG ===
BASE_PATH = r""C:\Users\Angshudeep Majumdar\Downloads""
LAT_BOUNDS = [22.25, 23.5]
LON_BOUNDS = [72.0, 73.25]
FORECAST_HOURS = np.arange(15, 85, 3)
GRID_SIZE = 5 * 5
INIT_HOURS = [6]  # Can include 0, 6, 12, 18

# === HELPERS ===
def create_output_dir(var_name):
    output_path = os.path.join(BASE_PATH, var_name)
    os.makedirs(output_path, exist_ok=True)
    return output_path

def download_gfs_data(var_name, grib_param, grib_level):
    output_dir = create_output_dir(var_name)
    base_url = "https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl"
    current_date = datetime.utcnow()

    for init_hour in INIT_HOURS:
        for fh in FORECAST_HOURS:
            url = (
                f"{base_url}?dir=%2Fgfs.{current_date.strftime('%Y%m%d')}%2F{init_hour:02d}%2Fatmos"
                f"&file=gfs.t{init_hour:02d}z.pgrb2.0p25.f{fh:03d}"
                f"&var_{grib_param}=on&lev_{grib_level}=on&subregion=&toplat=47&leftlon=55&rightlon=105&bottomlat=0"
            )
            filename = f"gfs.{current_date.strftime('%Y%m%d')}.t{init_hour:02d}z.pgrb2.0p25.f{fh:03d}"
            filepath = os.path.join(output_dir, filename)

            if not os.path.exists(filepath):
                r = requests.get(url)
                if r.status_code == 200:
                    with open(filepath, "wb") as f:
                        f.write(r.content)
                    print(f"Downloaded: {filename}")
                else:
                    print(f"[ERROR] Failed: {url} | Status: {r.status_code}")

def get_grib_file_paths(var_name):
    root_dir = os.path.join(BASE_PATH, var_name)
    pattern = r'gfs\.\d{8}\.t\d{2}z\.pgrb2\.0p25\.f\d{3}$'
    files = {}
    for root, _, filenames in os.walk(root_dir):
        dir_key = os.path.basename(root)
        files[dir_key] = [f for f in filenames if re.match(pattern, f)]
    return files, root_dir

def extract_forecast_grid(var_name, grib_param_name):
    ts_utc = pd.Timestamp.utcnow().normalize() + pd.Timedelta(hours=6)
    df = pd.DataFrame(index=[ts_utc], columns=[
        f'{var_name}_{lat}_{lon}_{fh:03d}'
        for fh in FORECAST_HOURS
        for lat in np.arange(LAT_BOUNDS[1], LAT_BOUNDS[0] - 0.01, -0.25)
        for lon in np.arange(LON_BOUNDS[0], LON_BOUNDS[1] + 0.01, 0.25)
    ])

    file_dict, root_dir = get_grib_file_paths(var_name)

    for time_step in df.index:
        year, month, day, hour = time_step.year, time_step.month, time_step.day, time_step.hour
        forecast_times = pd.date_range(time_step + timedelta(hours=15),
                                       time_step + timedelta(hours=84), freq='3H')
        data_temp = pd.DataFrame(index=forecast_times, columns=np.arange(GRID_SIZE), dtype=float)

        for fh in FORECAST_HOURS:
            fname = f'gfs.{year}{month:02d}{day:02d}.t06z.pgrb2.0p25.f{fh:03d}'
            file_path = os.path.join(root_dir, fname)

            if os.path.exists(file_path):
                try:
                    grbs = pygrib.open(file_path)
                    grb = grbs.select(name=grib_param_name)[0]
                    grid = grb.values[2:7, 2:7][::-1]
                    flat = np.ravel(grid)
                    if len(flat) == GRID_SIZE:
                        forecast_time = time_step + timedelta(hours=fh)
                        data_temp.loc[forecast_time] = flat
                    grbs.close()
                except Exception as e:
                    print(f"[ERROR] Reading {fname}: {e}")
            else:
                print(f"[MISSING] {fname}")

        flat_data = np.ravel(data_temp.values.astype(float))
        if len(flat_data) == GRID_SIZE * len(FORECAST_HOURS):
            df.iloc[0, :len(flat_data)] = flat_data
        else:
            print(f"[WARN] Unexpected shape: {flat_data.shape}")
            df.iloc[0, :] = np.nan

    return df

def save_forecast(df, var_name):
    df.index = df.index.tz_localize(None) + pd.Timedelta(hours=5, minutes=30)
    df.index.name = 'DateTime'
    target_time = pd.Timestamp("11:30").time()
    extracted = df[df.index.time == target_time]
    output_path = os.path.join(BASE_PATH, f"{var_name}_Ahmedabad.xlsx")
    extracted.to_excel(output_path)
    print(f"Saved to: {output_path}")

# === MAIN ENTRY ===
def process_variable(var_name, grib_param, grib_param_name, grib_level='1000_mb'):
    download_gfs_data(var_name, grib_param, grib_level)
    df = extract_forecast_grid(var_name, grib_param_name)
    save_forecast(df, var_name)

# === USAGE ===
if __name__ == "__main__":
    process_variable("U1000", "UGRD", "U component of wind")
    process_variable("V1000", "VGRD", "V component of wind")
